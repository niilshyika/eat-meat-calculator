{"version":3,"sources":["App.js","index.js"],"names":["round","value","decimals","Number","Math","console","log","countries","BOVIE_MEAT","PIG_MEAT","POULTRY_MEAT","options","map","country","label","App","useState","currentCountry","setCountry","age","setAge","restAge","eatenBovine","eatenPig","eatenPoultry","savedBovine","savedPig","savedPoultry","a","b","c","sqrt","bovineConsumption","pigConsumption","poultryConsumption","className","defaultValue","onChange","e","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAOA,SAASA,EAAMC,EAAOC,GACpB,OAAOC,OAAOC,KAAKJ,MAAMC,EAAM,IAAIC,GAAU,KAAKA,GAHpDG,QAAQC,IAAIC,GAMZ,IAAMC,EACQ,IADRA,EAES,IAGTC,EACQ,GADRA,EAES,IAGTC,EACQ,IADRA,EAES,IAGTC,EAAUJ,EAAUK,KAAI,SAACC,GAAD,mBAAC,eAC1BA,GADyB,IAE5BC,MAAOD,EAAQA,QACfZ,MAAOY,EAAQA,aAsEFE,EAnEH,WAAO,IAAD,EACqBC,mBAAS,MAD9B,mBACTC,EADS,KACOC,EADP,OAEMF,mBAAS,IAFf,mBAETG,EAFS,KAEJC,EAFI,KAIZC,EAAU,EACVC,EAAc,EACdC,EAAW,EACXC,EAAe,EACfC,EAAc,EACdC,EAAW,EACXC,EAAe,EACnB,GAAIV,EAAgB,CAAC,IACXW,EAAYX,EAAZW,EAAGC,EAASZ,EAATY,EAAGC,EAAMb,EAANa,EACdT,EAAUrB,EAAM4B,GAAKxB,KAAK2B,KAAK,SAACZ,EAAMU,EAAM,GAAIC,GAAKX,GAAO,EAAG,GAE/DG,EAActB,EAAMiB,EAAee,kBAAoBxB,EAAwBA,EAAyBW,EAAK,GAC7GI,EAAWvB,EAAMiB,EAAegB,eAAiBxB,EAAsBA,EAAuBU,EAAK,GACnGK,EAAexB,EAAMiB,EAAeiB,mBAAqBxB,EAA0BA,EAA2BS,EAAK,GAEnHM,EAAczB,EAAMiB,EAAee,kBAAoBxB,EAAwBA,EAAyBa,EAAS,GACjHK,EAAW1B,EAAMiB,EAAegB,eAAiBxB,EAAsBA,EAAuBY,EAAS,GACvGM,EAAe3B,EAAMiB,EAAeiB,mBAAqBxB,EAA0BA,EAA2BW,EAAS,GAGzH,OACE,sBAAKc,UAAU,MAAf,UACE,6NACA,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,gCAAf,SACE,kCACE,qBAAKA,UAAU,cAAf,6FACA,cAAC,IAAD,CACEC,aAAcnB,EACdoB,SAAUnB,EACVP,QAASA,SAIf,qBAAKwB,UAAU,kBAAf,SACE,kCACE,qBAAKA,UAAU,cAAf,mGACA,uBACEA,UAAU,YACVlC,MAAOkB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAOkB,EAAEC,OAAOtC,QACjCuC,KAAK,mBAKZnB,EACC,+KAAwDA,KACtD,KAEJ,+GACEC,EAAc,gFAAsBA,KAAsB,KAC1DC,EAAW,gFAAsBA,KAAmB,KACpDC,EAAe,8HAAiCA,KAAuB,KAEzE,kPACEC,EAAc,gFAAsBA,KAAsB,KAC1DC,EAAW,gFAAsBA,KAAmB,KACpDC,EAAe,8HAAiCA,KAAuB,SCzF/Ec,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.1aaecf69.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport \"./App.css\";\nimport countries from \"./final.json\";\n\nconsole.log(countries);\n\nfunction round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nconst BOVIE_MEAT = {\n  usefulMass: 0.62,\n  averageMass: 550\n}\n\nconst PIG_MEAT = {\n  usefulMass: 0.7,\n  averageMass: 130\n}\n\nconst POULTRY_MEAT = {\n  usefulMass: 0.71,\n  averageMass: 2.6\n}\n\nconst options = countries.map((country) => ({\n  ...country,\n  label: country.country,\n  value: country.country,\n}));\n\nconst App = () => {\n  const [currentCountry, setCountry] = useState(null);\n  const [age, setAge] = useState(12);\n\n  let restAge = 0;\n  let eatenBovine = 0;\n  let eatenPig = 0;\n  let eatenPoultry = 0;\n  let savedBovine = 0;\n  let savedPig = 0;\n  let savedPoultry = 0;\n  if (currentCountry) {\n    const { a, b, c } = currentCountry;\n    restAge = round(a + (Math.sqrt((age - b) ** 2 + c) - age) / 2, 1);\n    \n    eatenBovine = round(currentCountry.bovineConsumption / BOVIE_MEAT.usefulMass / BOVIE_MEAT.averageMass * age, 1);\n    eatenPig = round(currentCountry.pigConsumption / PIG_MEAT.usefulMass / PIG_MEAT.averageMass * age, 1);\n    eatenPoultry = round(currentCountry.poultryConsumption / POULTRY_MEAT.usefulMass / POULTRY_MEAT.averageMass * age, 1);\n\n    savedBovine = round(currentCountry.bovineConsumption / BOVIE_MEAT.usefulMass / BOVIE_MEAT.averageMass * restAge, 1);\n    savedPig = round(currentCountry.pigConsumption / PIG_MEAT.usefulMass / PIG_MEAT.averageMass * restAge, 1);\n    savedPoultry = round(currentCountry.poultryConsumption / POULTRY_MEAT.usefulMass / POULTRY_MEAT.averageMass * restAge, 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>Форма рассчёта съеденных зверушек</header>\n      <div className=\"filter-container\">\n        <div className=\"input-container country-input\">\n          <label>\n            <div className=\"input-label\">Введите страну</div>\n            <Select\n              defaultValue={currentCountry}\n              onChange={setCountry}\n              options={options}\n            />\n          </label>\n        </div>\n        <div className=\"input-container\">\n          <label>\n            <div className=\"input-label\">Введите возраст</div>\n            <input\n              className=\"age-input\"\n              value={age}\n              onChange={(e) => setAge(e.target.value)}\n              type=\"number\"\n            ></input>\n          </label>\n        </div>\n      </div>\n      {restAge ? (\n        <div>Оставшееся число лет (Remaining Life expectancy): {restAge}</div>\n      ) : null}\n\n      <div>Уже съедено(alredy eaten):</div>\n      { eatenBovine ? <div>Коровы (Cows): { eatenBovine }</div> : null }\n      { eatenPig ? <div>Свиньи (Pigs): { eatenPig }</div> : null }\n      { eatenPoultry ? <div>Домашние птицы (Poultry): { eatenPoultry }</div> : null }\n\n      <div>будут съедены \\ могут быть спасены(will be eaten \\ can be saved):</div>\n      { savedBovine ? <div>Коровы (Cows): { savedBovine }</div> : null }\n      { savedPig ? <div>Свиньи (Pigs): { savedPig }</div> : null }\n      { savedPoultry ? <div>Домашние птицы (Poultry): { savedPoultry }</div> : null }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}