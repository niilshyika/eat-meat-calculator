[{"C:\\Ilya\\Development\\eat-meat-calculator\\src\\index.js":"1","C:\\Ilya\\Development\\eat-meat-calculator\\src\\constants.js":"2","C:\\Ilya\\Development\\eat-meat-calculator\\src\\App.js":"3","C:\\Ilya\\Development\\eat-meat-calculator\\src\\utils.js":"4","C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\lang-popup.jsx":"5","C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\aside.jsx":"6","C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\life-expentancy.jsx":"7"},{"size":218,"mtime":1611864023944,"results":"8","hashOfConfig":"9"},{"size":946,"mtime":1611859435173,"results":"10","hashOfConfig":"9"},{"size":6650,"mtime":1611938433553,"results":"11","hashOfConfig":"9"},{"size":510,"mtime":1611935251087,"results":"12","hashOfConfig":"9"},{"size":352,"mtime":1611863797370,"results":"13","hashOfConfig":"9"},{"size":1482,"mtime":1612004594680,"results":"14","hashOfConfig":"9"},{"size":484,"mtime":1612001655870,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"r963y0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Ilya\\Development\\eat-meat-calculator\\src\\index.js",[],["33","34"],"C:\\Ilya\\Development\\eat-meat-calculator\\src\\constants.js",[],"C:\\Ilya\\Development\\eat-meat-calculator\\src\\App.js",["35","36"],"import React, { useState, useRef } from \"react\";\nimport Media from \"react-media\";\nimport Select from \"react-select\";\nimport \"./App.css\";\nimport Card from './components/card';\nimport LifeExpentancy from './components/life-expentancy';\nimport LangPopup from './components/lang-popup';\nimport Aside from './components/aside'\nimport { round, useOutsideClick } from './utils';\nimport countries from \"./final.json\";\nimport {\n  BOVIE_MEAT,\n  PIG_MEAT,\n  POULTRY_MEAT,\n  LOCALIZATION,\n} from \"./constants.js\";\nimport cowIcon from \"./imgs/cow.svg\";\nimport pigIcon from \"./imgs/pig.svg\";\nimport chickenIcon from \"./imgs/chicken.svg\";\nimport redCowIcon from \"./imgs/cow-red.svg\";\nimport redPigIcon from \"./imgs/pig-red.svg\";\nimport redChickenIcon from \"./imgs/chicken-red.svg\";\n\nconst options = countries.map((country) => ({\n  ...country,\n  label: country.country,\n  value: country.country,\n}));\n\nconst calculateMeatValue = (country, consumptionType, meatConstant, age) => {\n  return round(\n    (country[consumptionType] /\n      meatConstant.usefulMass /\n      meatConstant.averageMass) *\n      age,\n    1\n  )\n}\n\nconst App = () => {\n  const [currentCountry, setCountry] = useState(null);\n  const [age, setAge] = useState(null);\n  const [localization, setLocalization] = useState(\"EN\");\n  const [isLangPopup, setLangPopup] = useState(false);\n  const [isAside, setAside] = useState(false);\n\n  let restAge = 0,\n    eatenBovine = 0,\n    eatenPig = 0,\n    eatenPoultry = 0,\n    savedBovine = 0,\n    savedPig = 0,\n    savedPoultry = 0;\n\n  if (currentCountry) {\n    const { a, b, c } = currentCountry;\n    restAge = round(a + (Math.sqrt((age - b) ** 2 + c) - age) / 2, 1);\n\n    eatenBovine = calculateMeatValue(currentCountry, 'bovineConsumption', BOVIE_MEAT, age);\n    eatenPig = calculateMeatValue(currentCountry, 'pigConsumption', PIG_MEAT, age);\n    eatenPoultry = calculateMeatValue(currentCountry, 'poultryConsumption', POULTRY_MEAT, age);\n    savedBovine = calculateMeatValue(currentCountry, 'bovineConsumption', BOVIE_MEAT, restAge);\n    savedPig = calculateMeatValue(currentCountry, 'pigConsumption', PIG_MEAT, restAge); \n    savedPoultry = calculateMeatValue(currentCountry, 'poultryConsumption', POULTRY_MEAT, restAge); \n  }\n\n  let cards = [\n    { icon: cowIcon, redIcon: redCowIcon, eaten: eatenBovine, canBeSaved: savedBovine },\n    { icon: pigIcon, redIcon: redPigIcon, eaten: eatenPig, canBeSaved: savedPig },\n    { icon: chickenIcon, redIcon: redChickenIcon, eaten: eatenPoultry, canBeSaved: savedPoultry },\n  ];\n\n  let currentLocalization = LOCALIZATION[localization];\n  let localizationKeys = Object.keys(LOCALIZATION)\n\n  let selectStyles = {\n    control: (styles) => ({\n      ...styles,\n      border: '3px solid #92C367',\n      background: 'transparent',\n      outline: 'none'\n    }),\n  };\n\n  const selectLang = (lang) => {\n    setLangPopup(false);\n    setLocalization(lang);\n  }\n\n  return (\n    <Media query={{ maxWidth: 567 }}>\n        {isMobile => (\n          <div className=\"App\">\n            {/* <div className={`aside-wrapper ${isAside ? 'aside-wrapper--visible': ''}`}>\n            </div> */}\n            {isMobile && <Aside\n              isVisible={isAside}\n              closeHandler={() => setAside(false)}\n              activeLang={localization}\n              langs={localizationKeys}\n              langHandler={selectLang}\n            />}\n            \n            <header>\n              {isMobile && <div onClick={() => setAside(true)} className=\"header_aside-button\">\n                <div className=\"header_aside-line\"></div>\n              </div>}\n              <div className=\"header_title\">Vegan calculator</div>\n              {!isMobile && <div className=\"header_local-block\">\n                <div\n                  className=\"header_local-button\"\n                  onClick={() => setLangPopup(true)}\n                >\n                  {localization}\n                </div>\n                {isLangPopup && <LangPopup\n                  items={localizationKeys}\n                  onSelectLang={selectLang}\n                  active={localization}\n                />}\n              </div>}\n            </header>\n\n            <div className=\"filter-container\">\n              <div className=\"input-container country-input\">\n                <label>\n                  <div className=\"input-label\">{currentLocalization.country}</div>\n                  <Select\n                    defaultValue={currentCountry}\n                    onChange={setCountry}\n                    options={options}\n                    styles={selectStyles}\n                    placeholder={currentLocalization.enterCountry}\n                  />\n                </label>\n              </div>\n              <div className=\"input-container input-container--age\">\n                <label>\n                  <div className=\"input-label\">{currentLocalization.age}</div>\n                  <input\n                    className=\"age-input\"\n                    value={age}\n                    onChange={(e) => setAge(e.target.value)}\n                    type=\"number\"\n                    placeholder={currentLocalization.enterAge}\n                  ></input>\n                </label>\n              </div>\n              { !isMobile && <LifeExpentancy\n                restAge={restAge}\n                localization={currentLocalization}\n              /> }\n            </div>\n            {isMobile && (\n              <div className=\"life-container\">\n                 <LifeExpentancy restAge={restAge} localization={currentLocalization} />\n              </div>\n            )}\n\n            <div className=\"cards-container\">\n              <div className=\"cards-rows\">\n                <div className=\"cards-row\">\n                  <div className=\"cards-title\">\n                    {currentLocalization.alreadyEaten}\n                  </div>\n                  <div className=\"cards\">\n                    {cards &&\n                      cards.map(({ redIcon, eaten }) => (\n                        <Card icon={redIcon} isEaten amount={eaten} />\n                      ))}\n                  </div>\n                </div>\n\n                <div className=\"cards-row cards-row--right\">\n                  <div className=\"cards-title\">\n                    {currentLocalization.canBeSaved}\n                  </div>\n                  <div className=\"cards\">\n                    {cards &&\n                      cards.map(({ icon, canBeSaved }) => (\n                        <Card icon={icon} amount={canBeSaved} />\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n       )}\n    </Media>\n  );\n};\n\nexport default App;\n","C:\\Ilya\\Development\\eat-meat-calculator\\src\\utils.js",[],"C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\lang-popup.jsx",[],"C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\aside.jsx",["37","38","39","40"],"import React, { useRef } from 'react';\r\nimport { useOutsideClick } from '../utils';\r\nimport closeIcon from '../imgs/close-icon2.svg';\r\nimport telegram from '../imgs/telegram.svg';\r\nimport vk from '../imgs/vk.svg';\r\n\r\nconst siteUrl='https://niilshyika.github.io/eat-meat-calculator/';\r\nconst tgShareLink = `https://t.me/share/url?url=${siteUrl}`;\r\nconst vkShareLink = `http://vk.com/share.php?url=${siteUrl}`;\r\n\r\nconst Aside = ({ isVisible, closeHandler, langs, activeLang, langHandler }) => {\r\n  const asideRef = useRef();\r\n\r\n  useOutsideClick(asideRef, () => {\r\n    isVisible && closeHandler();\r\n  });\r\n\r\n  return (\r\n    <div ref={ asideRef } className={`aside ${ isVisible ? 'aside--visible': '' }`}>\r\n      <div class=\"aside_close\" onClick={ closeHandler }>\r\n        <img src={ closeIcon } alt=\"close\" />\r\n      </div>\r\n\r\n      <div className=\"aside__lang-wrapper\">\r\n        {langs.map(lang => (\r\n          <div\r\n            className={`aside__lang-button ${lang === activeLang ? 'aside__lang-button--active' : ''}`} \r\n            onClick={() => {\r\n              langHandler(lang);\r\n              closeHandler();\r\n            }}\r\n          >{lang}</div>\r\n\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"aside__share-buttons\">\r\n        <a href={tgShareLink} target=\"_blank\">\r\n          <img src={telegram} />\r\n        </a>\r\n\r\n        <a href={vkShareLink} target=\"_blank\">\r\n          <img src={vk} />\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Aside;","C:\\Ilya\\Development\\eat-meat-calculator\\src\\components\\life-expentancy.jsx",["41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":27,"nodeType":"48","messageId":"49","endLine":1,"endColumn":33},{"ruleId":"46","severity":1,"message":"50","line":9,"column":17,"nodeType":"48","messageId":"49","endLine":9,"endColumn":32},{"ruleId":"51","severity":1,"message":"52","line":38,"column":31,"nodeType":"53","endLine":38,"endColumn":46},{"ruleId":"54","severity":1,"message":"55","line":39,"column":11,"nodeType":"56","endLine":39,"endColumn":33},{"ruleId":"51","severity":1,"message":"52","line":42,"column":31,"nodeType":"53","endLine":42,"endColumn":46},{"ruleId":"54","severity":1,"message":"55","line":43,"column":11,"nodeType":"56","endLine":43,"endColumn":27},{"ruleId":"54","severity":1,"message":"55","line":8,"column":11,"nodeType":"56","endLine":8,"endColumn":60},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useOutsideClick' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]